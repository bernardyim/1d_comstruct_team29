module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    input button,
    output dinoled,
    output io_led [3][8]
  ) {
  
  sig rst;                  // reset signal
  core core;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    .rst(rst) {
      blinker myBlinker;
      dff slowClock[17](#INIT(0));
    }
  }


  
  always { 
    reset_cond.in = ~rst_n;    // input raw inverted reset signal
    rst = reset_cond.out;      // conditioned reset

    io_led = 3x{{8h00}};    // turn LEDs off
    led = 8x{myBlinker.blink}; // blink LEDs
    spi_miso = bz;             // not using SPI
    spi_channel = bzzzz;       // not using flags
    avr_rx = bz;               // not using serial port
    
    slowClock.d = slowClock.q + 1;
    
    core.clk = slowClock.q[16];
    core.rst = rst;
    
    io_led[0] = core.obstacle[7:0];
    io_led[1] = core.obstacle[15:8];
    io_led[2] = core.obstacle[23:16];
    core.jumpDinoButton = button;
    io_led[1][7] = rst;
    dinoled = core.dinopos;
  }
}